;;;; lilypond-mode.el -- Major mode for editing GNU LilyPond music scores
;;;; This file is part of LilyPond, the GNU music typesetter.
;;;;  
;;;; Copyright (C) 1999--2015 Jan Nieuwenhuizen <janneke@gnu.org>
;;;; Changed 2001--2003 Heikki Junes <heikki.junes@hut.fi>
;;;;    * Add PS-compilation, PS-viewing and MIDI-play (29th Aug 2001)
;;;;    * Keyboard shortcuts (12th Sep 2001)
;;;;    * Inserting tags, inspired on sgml-mode (11th Oct 2001)
;;;;    * Autocompletion & Info (23rd Nov 2002)
;;;;
;;;; LilyPond is free software: you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation, either version 3 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; LilyPond is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with LilyPond.  If not, see <http://www.gnu.org/licenses/>.


;;; Inspired on auctex

;;; Look lilypond-init.el or Documentation/topdocs/INSTALL.texi
;;; for installing instructions.


(defun LilyPond-add-dictionary-word (x)
  "Contains all words: \keywords \Identifiers and ReservedWords."
  (nconc '(("" . 1)) x))

(defconst LilyPond-keywords
  (let ((wordlist '("\\score"))
	(co (all-completions "" (LilyPond-add-dictionary-word ())))
	(currword ""))
    (progn
      (while (> (length co) 0)
	(setq currword (car co))
	(if (> (length currword) 1)
	    (if (and (string-equal "\\" (substring currword 0 1))
	             (string-match "[a-z-]+" currword)
	    	     (= (match-beginning 0) 1)
	    	     (= (match-end 0) (length currword))
		     (not (string-equal "\\longa" currword))
		     (not (string-equal "\\breve" currword))
		     (not (string-equal "\\maxima" currword))
		     (string-equal (downcase currword) currword))
		(add-to-list 'wordlist currword)))
	(if (string-equal "-" (car (setq co (cdr co))))
	    (while (and (> (length co) 0)
			(not (string-equal "-" (car (setq co (cdr co)))))))))
      (reverse wordlist)))
  "LilyPond \\keywords")


(defconst LilyPond-identifiers 
  (let ((wordlist '("\\voiceOne"))
	(co (all-completions "" (LilyPond-add-dictionary-word ()))))
    (progn
      (while (> (length co) 0)
	(setq currword (car co))
	(if (> (length currword) 1)
	    (if (and (string-equal "\\" (substring currword 0 1))
	             (string-match "[a-zA-Z-]+" currword)
	    	     (= (match-beginning 0) 1)
	    	     (= (match-end 0) (length currword))
		     (not (string-equal (downcase currword) currword)))
		(add-to-list 'wordlist currword)))
	(if (string-equal "-" (car (setq co (cdr co))))
	    (while (and (> (length co) 0)
			(not (string-equal "-" (car (setq co (cdr co)))))))))
      (reverse wordlist)))
  "LilyPond \\Identifiers")


(defconst LilyPond-Capitalized-Reserved-Words 
  (let ((wordlist '("StaffContext"))
	(co (all-completions "" (LilyPond-add-dictionary-word ()))))
    (progn
      (while (> (length co) 0)
	(setq currword (car co))
	(if (> (length currword) 0)
	    (if (and (string-match "[a-zA-Z_]+" currword)
	    	     (= (match-beginning 0) 0)
	    	     (= (match-end 0) (length currword))
		     (not (string-equal (downcase currword) currword)))
		(add-to-list 'wordlist currword)))
	(if (string-equal "-" (car (setq co (cdr co))))
	    (while (and (> (length co) 0)
			(not (string-equal "-" (car (setq co (cdr co)))))))))
      (reverse wordlist)))
  "LilyPond ReservedWords")


(defconst LilyPond-non-capitalized-reserved-words
  (let ((wordlist '("cessess"))
	(co (all-completions "" (LilyPond-add-dictionary-word ()))))
    (progn
      (while (> (length co) 0)
	(setq currword (car co))
	(if (> (length currword) 0)
	    (if (and (string-match "[a-z]+" currword)
	    	     (= (match-beginning 0) 0)
	    	     (= (match-end 0) (length currword))
		     (string-equal (downcase currword) currword))
		(add-to-list 'wordlist currword)))
	(if (string-equal "-" (car (setq co (cdr co))))
	    (while (and (> (length co) 0)
			(not (string-equal "-" (car (setq co (cdr co)))))))))
      (reverse wordlist)))
  "LilyPond notenames")

(defconst LilyPond-font-lock-keywords
  (let* ((kwregex (mapconcat (lambda (x) (concat "\\" x))  LilyPond-keywords "\\|"))
	 (iregex (mapconcat (lambda (x) (concat "\\" x))  LilyPond-identifiers "\\|"))
	 (ncrwregex (mapconcat (lambda (x) (concat "" x))  LilyPond-non-capitalized-reserved-words "\\|"))
	 (rwregex (mapconcat (lambda (x) (concat "" x))  LilyPond-Capitalized-Reserved-Words "\\|"))
	 (duration "\\([ \t]*\\(128\\|6?4\\|3?2\\|16?\\|8\\)[.]*\\([ \t]*[*][ \t]*[0-9]+\\(/[1-9][0-9]*\\)?\\)?\\)") 
	 (longduration "\\([ \t]*\\(\\\\\\(longa\\|breve\\|maxima\\)\\)[.]*\\([ \t]*[*][ \t]*[0-9]+\\(/[1-9][0-9]*\\)?\\)?\\)") 
         )

    (list 
     ;; Fonts in use (from GNU Emacs Lisp Reference Manual, elisp.ps):
     ;; font-lock- (c)omment / (s)tring / (k)eyword / (b)uiltin / (f)unction-name / 
     ;;            (v)ariable-name / (t)ype / co(n)stant / (w)arning -face

     ;; The order below is designed so that proofreading would be possible.

     ;; Fontify...
     ;; ... (f) identifiers and (k) keywords.
     ;; ... (n) user defined indetifiers
     ;; ... (v) the right and the left side of '='-marks.
     ;; ... (v) reserved words, e.g., FiguredBass.
     ;; ... (t) notes and rests
     ;; "on top", ... (s) lyrics-mode
     ;; "on top", ... (w) horizontal grouping
     ;; "on top", ... (f) vertical grouping
     ;; "on top", ... (b) expressional grouping
     ;; "on top", ... (s) (multiline-)scheme; urgh. one should count the slurs
     ;; "on top", ... (s) strings
     ;; "on top", ... (c) (multiline-)comments

     ;; One should note 'font-lock-multiline' has been possible since Emacs 21.1.
     ;; See, e.g., text in "http://emacs.kldp.org/emacs-21.1/etc/NEWS".

     ;; ... identifiers (defined above, see iregex)
     (cons (concat "\\(\\([_^-]?\\(" iregex "\\)\\)+\\)\\($\\|[] \t(~{}>\\\\_()^*-]\\)") '(1 font-lock-function-name-face))

     ;; ... keywords (defined above, see kwregex)
     (cons (concat "\\(\\([_^-]?\\(" kwregex "\\)\\)+\\)\\($\\|[] \t(~{}>\\\\_()^*-]\\)") '(1 font-lock-keyword-face))

     ;; ... user defined identifiers, roughly  \[a-zA-Z]+ with single - or _ in between.
     '("\\([_^-]?\\\\\\([a-zA-Z[:nonascii:]]\\(?:[-_]?[a-zA-Z[:nonascii:]]\\)*\\)\\)" 1 font-lock-constant-face)

     ;; ... the left side of '=' -mark
     '("\\([_a-zA-Z.0-9-]+\\)[ \t]*=[ \t]*" 1 font-lock-variable-name-face)

     ;; ... the right side of '=' -mark
     '("[ \t]*=[ \t]*\\([_a-zA-Z.0-9-]+\\)" 1 font-lock-variable-name-face)

     ;; ... reserved words (defined above, see rwregex)
     (cons (concat "\\(" rwregex "\\)") 'font-lock-variable-name-face)

     ;; ... note or rest with (an accidental and) a duration, e.g., b,?16.*3/4
     (cons (concat "\\(^\\|[ <\{[/~(!)\t\\\|]\\)\\(\\(\\(" ncrwregex "\\)[,']*[?!]?\\|[srR]\\)" duration "?\\)") '(2 font-lock-type-face))

     ;; "on top", ... notes and rests with a long duration
     (cons (concat "\\(^\\|[ <\{[/~(!)\t\\\|]\\)\\(\\(\\(" ncrwregex "\\)[,']*[?!]?\\|[srR]\\)" longduration "\\)") '(2 font-lock-type-face t))

     ;; "on top", ... lyrics-mode: fontify everything between '<'...'>' or '{'...'}'
                                        ;            URGH, does not know anything about inner brackets.
                                        ;            Multiple lines may need refontifying (C-c f).
     '("\\(\\\\lyrics[^{<]*\\)\\({[^}]*\\|<[^>]*\\)" 2 font-lock-string-face t)

     ;; "on top", ... horizontal grouping, also as postfix syntax '-*':
     ;;               - brackets '{[]}'
     ;;               - ties '~'
     ;;               - ligatures \[, \]
     '("\\(-?[][~}{]\\|\\\\[][]\\)" 0 font-lock-reference-face t)

     ;; "on top", ... vertical grouping:
     ;;               - '<>'-chord brackets with '\\'-voice sep., not marcato '->'
     ;;               - '<< a b >>8' -chords
     (cons (concat "\\(\\(-.\\)+\\|[^-^_]\\)\\([<>]+\\(" duration "\\|" longduration "\\)?\\|\\\\\\\\\\)") '(3 font-lock-function-name-face t))

     ;; "on top", ... expressional grouping, also as postfix syntax '-*':
     ;;               - slurs ( ), \( \), [-^_][()]
     ;;               - hairpins \<, \>, \! 
     '("\\(-?\\\\[(<!>)]\\|[-^_]?[()]\\)" 0 font-lock-builtin-face t)

     ;; "on top", ... (multiline-)scheme: try find slurs up to 7th
     '("[_^-]?#\\(#[ft]\\|-?[0-9.]+\\|\"[^\"]*\"\\|['`]?[a-zA-Z:-]+\\|['`]?([^()]*\\(([^()]*\\(([^()]*\\(([^()]*\\(([^()]*\\(([^()]*\\(([^)]*)[^()]*\\)*)[^()]*\\)*)[^()]*\\)*)[^()]*\\)*)[^()]*\\)*)[^()]*\\)*[^)]*)\\)" 0 font-lock-string-face t)

     ;; "on top", ... strings, match also unending strings at eof:
     ;;               if '\n' was not found, it must be '$' which is eof (?).
     '("\\([_^-]?\"\\([^\"\\\\]\\|\\\\.\\|\\\\\n\\)*\\(\"\\|$\\)\\)" 0 font-lock-string-face t)

     ;; "on top", ... (multiline-)comments
     '("\\(%\\({[^%]*%\\(}\\|\\([^}][^%]*%\\)+}\\)\\|.*\\)\\)" 0 font-lock-comment-face t)

     )
    )
  "Additional expressions to fontify in LilyPond mode.")


(defun sane-lilypond-indent ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (insert "  ")))

(defun sane-lilypond-deindent ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (when (looking-at-p "\\ \\ ")
      (delete-char 2 ))))


(define-derived-mode sane-lilypond-mode prog-mode "sane-lilypond"
  "This is a sane version of lilypond-mode that I made myself,
because LilyPond-mode is a damn mess."
  
  ;; Remove local variables, and enable font-lock
  (kill-all-local-variables)
  (make-local-variable 'font-lock-defaults)
  (setq font-lock-defaults '(LilyPond-font-lock-keywords))

  ;; 
  (make-local-variable 'font-lock-multiline) 
  (setq font-lock-multiline t) 

  
  ;; string and comments are fontified explicitly
  (make-local-variable 'font-lock-keywords-only)
  (setq font-lock-keywords-only t)

  ;; simple indent
  (local-set-key (kbd "C-i") 'sane-lilypond-indent)
  (local-set-key (kbd "<backtab>") 'sane-lilypond-deindent))


(defvar sane-lilypond-mode-map
  (let ((map (make-keymap)))
    (define-key map (kbd "C-i") 'sane-lilypond-indent)
    (define-key map (kbd "<backtab>") 'sane-lilypond-deindent)
    map)
  "Keymap for sane-lilypond-mode")


