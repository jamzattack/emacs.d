* Remove =C-z=

Unbind =C-z= before anything else, so that I can use it as a prefix
key.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

* Packages

** Startup

*** Repositories and initialisation

Enable melpa archive and making sure packages work

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")))
  (package-initialize)
#+end_src

*** Use-package

Install use-package if not installed

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

*** Fonts

This section has been moved to a different file: =./config/fonts.el=

#+begin_src emacs-lisp
  (defun set-up-fonts-please ()
    (interactive)
    (load-file (expand-file-name "~/.emacs.d/config/fonts.el")))
  (add-hook 'after-make-frame-functions
            (load-file (expand-file-name "~/.emacs.d/config/fonts.el")))
#+end_src

** Built-in

*** Org Mode

Open source blocks and stuff in the current window. Use tab from the
language's major mode inside source blocks.

#+begin_src emacs-lisp
  (use-package org
    :custom ((org-src-window-setup 'current-window)
             (org-src-tab-acts-natively t))
    :hook (org-mode-hook . org-indent-mode)
    :config (require 'org-tempo))
#+end_src

*** EWW 

A browser written in elisp!  I need to load this after everything
else, so that I can bind a couple of functions.

#+begin_src emacs-lisp
  (use-package eww
    :custom (browse-url-browser-function 'eww-browse-url)
    :after (init)
    :bind
    (("C-x r e" . 'eww-list-bookmarks)
     (:map eww-mode-map
           ("m" . 'transmission-add-url-at-point)
           ("f" . 'dmenu-handler-stream))))
#+end_src

*** recentf

I don't really understand recentf, but this loads it in case I need
it.

#+begin_src emacs-lisp
  (use-package recentf
    :config (recentf-load-list))
#+end_src

*** COMMENT ido 

I've switched to helm now, but this is a comment for the times when
I'd prefer to use ido.

#+begin_src emacs-lisp
  (use-package ido
    :after (require 'ido-bookmark-jump)
    :bind ("C-x r b" . ido-bookmark-jump)
    :config (ido-everywhere t)
    :custom (max-mini-window-height 1))
#+end_src

** My packages

*** Toggle-touchpad

A simple package I wrote to toggle the touchpad/trackpoint on my
ThinkPad

#+begin_src emacs-lisp
  (use-package toggle-touchpad
    :load-path "~/.emacs.d/lisp/"
    :after (init)
    :defer t
    :bind
    (("<XF86TouchpadToggle>" . 'toggle-touchpad)
     ("C-z \\" . 'toggle-touchpad)))
#+end_src

*** dmenu-handler

A way to open URLs the way I want. I bind it to =C-z d=

#+begin_src emacs-lisp
  (use-package dmenu-handler
    :load-path "~/.emacs.d/lisp/dmenu"
    :bind
    (("C-z d" . 'dmenu-handler)))
#+end_src

*** dwm-mode

Manipulate emacs windows similarly to suckless' dwm.

#+begin_src emacs-lisp
  (use-package dwm
    :load-path "~/.emacs.d/lisp/"
    :config (setq dwm-mode-emulate-keybindings t))
#+end_src

*** library-genesis

#+begin_src emacs-lisp
  (use-package library-genesis
    :bind (("C-z l" . library-genesis-search)))

#+end_src
*** search-query

My own search-query package. It simply provides a few functions so
that I don't need to use DuckDuckGo's bangs, and for websites that
don't have a bang.

#+begin_src emacs-lisp
  (use-package search-query
    :bind (("C-z t" . torrentz2-search)
           ("C-z y" . youtube-search)
           ("C-z w" . wikipedia-search)))
#+end_src

*** lilypond-mode

I copied lilypond-mode into my custom directory for the machines that
don't have lilypond installed.

#+begin_src emacs-lisp
  (use-package lilypond-mode
    :load-path "lisp/lilypond-mode"
    :defer 20
    :init (add-to-list 'auto-mode-alist
                       '("\\.ly$" . LilyPond-mode))
    :hook (LilyPond-mode-hook
           . (lambda () (interactive)
               (set-comment-column 0))))
#+end_src

** ELPA Packages

*** god-mode

God-mode is kinda like modal editing using the default keybindings.
It essentially acts as an emacs-only sticky-key.

I bind it to <right> for when I'm using termux, and <f8> for my proper
keyboard (which uses the same key for Control and f8).

I also set it up so that my mode-line is purple when it is active, and
green otherwise.

#+begin_src emacs-lisp
  (use-package god-mode
    :ensure t
    :custom
    ((god-exempt-major-modes nil)
     (god-exempt-predicates nil))
    :bind
    (("<f8>" . 'god-mode-all)
     ("<right>" . 'god-mode-all)
     :map god-local-mode-map
     ("." . 'repeat))
    :init
    (require 'my-mode-line)
    (add-hook 'god-mode-enabled-hook 'mode-line-purple)
    (add-hook 'god-mode-disabled-hook 'mode-line-green))
#+end_src

*** HELM

Rebind a few keys in order to make use of helm's features. Stuff like
find-files and switch-to-buffer.

I also bind M-C-y to helm-show-kill-ring. I tried to use this to
replace yank-pop but the latter is too engrained in my fingers.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :custom (helm-completion-style 'emacs)
    :config
    (require 'helm-config)
    (ido-mode -1)
    (helm-mode t)
    :bind (("M-x" . 'helm-M-x)
           ("M-s o" . 'helm-occur)
           ("C-x b" . 'helm-mini)
           ("C-x C-f" . 'helm-find-files)
           ("C-x r b" . 'helm-filtered-bookmarks)
           ("C-x r i" . 'helm-register)
           ("M-C-y" . 'helm-show-kill-ring)
           :map helm-map
           ("C-h c" . 'describe-key-briefly)))
#+end_src

**** Helm system packages

Provides an abstraction layer for viewing and installing system
packages.

#+begin_src emacs-lisp
  (use-package helm-system-packages
    :after helm)
#+end_src

**** Helm notmuch

#+begin_src emacs-lisp
  (use-package helm-notmuch
    :after (helm notmuch))
#+end_src

**** Helm man

#+begin_src emacs-lisp
  (use-package helm-man
    :after (helm)
    :custom (man-width 80)
    :bind ("C-h RET" . 'helm-man-woman))
#+end_src

*** Pinentry

This package lets emacs be used for gpg authentication

#+begin_src emacs-lisp
  (use-package pinentry
    :custom (epg-pinentry-mode 'loopback)
    :config
    (pinentry-start))
#+end_src

*** Helpful

Helpful gives a whole lot more information than describe-*. I also
bind =C-h SPC= to helpful-at-point, just to save a keypress here and
there.

#+begin_src emacs-lisp
  (use-package helpful
    :bind (([remap describe-function] . helpful-function)
           ([remap describe-variable] . helpful-variable)
           ([remap describe-key] . helpful-key)
           ("C-h SPC" . helpful-at-point)))
#+end_src

*** Major Modes

**** Nov.el - epub in emacs

Read epub files in emacs. I set this up as the default mode for epubs.

#+begin_src emacs-lisp
  (use-package nov
    :init
    (add-to-list 'auto-mode-alist
                 '("\\.epub$" . nov-mode)))
#+end_src

*** Org

**** Github markdown

Export to markdown.

#+begin_src emacs-lisp
  (use-package ox-gfm)
#+end_src

**** Html export

Export to html.

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

*** EXWM - Emacs X Window Manager

Manipulate X windows as emacs buffers.

#+begin_src emacs-lisp
  (use-package exwm
    :ensure t
    :custom (exwm-workspace-number 1)
    :init
    (add-hook 'exwm-init-hook 'set-up-fonts-please)
    :config
    (require 'exwm-config)
    (exwm-config-default)
    (exwm-init))
#+end_src

**** Desktop-environment (useful with EXWM)

This package sets up volume keys, brightness keys, and a screen
locker. I like i3lock, and want it to use my theme's background
colour.

#+begin_src emacs-lisp
  (use-package desktop-environment
    :custom
    (desktop-environment-screenlock-command
     "i3lock -c ffffd0 -n")
    :init
    (desktop-environment-mode))
#+end_src

*** Programming

**** Geiser

Interact with scheme in a powerful and emacsy way. I set guile as the
default scheme program.

#+begin_src emacs-lisp
  (use-package geiser
    :custom ((scheme-program-name "guile")))
#+end_src

**** SLIME

Interact with common lisp in a powerful and emacsy way. I set sbcl as
the default lisp program.

#+begin_src emacs-lisp
  (use-package slime
    :custom ((inferior-lisp-program "sbcl")))
#+end_src

*** "Applications"

**** vterm

A performant terminal emulator in emacs. unfortunately, it still
doesn't play nice with complicated things such as nethack.

#+begin_src emacs-lisp
  (use-package vterm
    :load-path "~/.emacs.d/emacs-libvterm")
#+end_src

**** Mingus

A nice mpd front-end in emacs
(I couldn't get EMMS working with mopidy)

#+begin_src emacs-lisp
  (use-package mingus)
#+end_src

**** Notmuch

A simple email client, with emphasis on searching

#+begin_src emacs-lisp
  (use-package notmuch
    :config
    (setq notmuch-archive-tags '("-unread" "-inbox")
          notmuch-search-oldest-first nil)
    :bind
    (:map notmuch-show-mode-map
          ("u" . 'eww-follow-link)))
#+end_src

**** Transmission

An emacs front-end for the transmission bittorrent daemon

#+begin_src emacs-lisp
  (use-package transmission
    :config
    (defun transmission-add-url-at-point (url)
      "Adds torrent if point is on a magnet link"
      (interactive (list (shr-url-at-point current-prefix-arg)))
      (transmission-add url)))
#+end_src

*** Appearance

**** Theme

***** COMMENT base16

Base16 is a nice theme framework, but moe-theme is my new best friend.

#+begin_src emacs-lisp
  (use-package base16-theme)
#+end_src

**** Rainbow-mode

This package highlights hex colours
(also install xterm-color to use in a terminal emulator)

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :bind (("C-c h" . 'rainbow-mode)))
#+end_src

**** Rainbow-delimiters

Minor mode that highlights parentheses well

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

**** Dim (unclutter mode-line)

From Alezost, remove clutter in the mode-line.

#+begin_src emacs-lisp
  (use-package dim
    :config
    (dim-major-names
     '((lisp-interaction-mode "eλ")
       (emacs-lisp-mode    "el")
       (lisp-mode          "cl")
       (scheme-mode        "scm")
       (org-mode           "org")
       (Info-mode          "info")
       (LilyPond-mode      "ly")
       (ibuffer-mode        "ibu")
       (lilypond-mode      "ly")
       (help-mode          "?")))
    (dim-minor-names
     '((auto-fill-function " ")
       (isearch-mode       " ")
       (helm-mode          "")
       (god-local-mode     " ∞")
       (org-src-mode       " *" org)
       (desktop-environment-mode "" desktop-environment)
       (eldoc-mode         ""    eldoc))))
#+end_src

**** Dimmer (dim inactive buffers)

Dims inactive buffers, so that you can more clearly see which window
you're in (sometimes the mode-line just doesn't cut it).

#+begin_src emacs-lisp
  (use-package dimmer
    :custom (dimmer-fraction 0.3)
    :config (dimmer-mode t))
#+end_src

*** PDF-tools

Majorly increases performance when viewing pdfs as a file

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src

*** Quality of life

**** COMMENT Smex

smex integrates "M-x" with =ido=.

Note: I have abandoned ido in favour of helm, but left this as a
comment in case I want to switch back..

#+begin_src emacs-lisp
  (use-package smex
    :init (smex-initialize)
    :bind ("M-x" . smex ))
#+end_src

**** Try

Allows you to try other packages without committing

#+begin_src emacs-lisp
  (use-package try)
#+end_src

*** Not really useful

**** Lorem Ipsum

A 'Lorem ipsum' generator

#+begin_src emacs-lisp
  (use-package lorem-ipsum)
#+end_src

*** To be confirmed

**** Elpher

A gopher:// client written in elisp.

#+begin_src emacs-lisp
  (use-package elpher)
#+end_src

**** xclip

xclip allows the use of X11 clipboard in a terminal. I never use it
because the only terminal I use is a tty, and that's just for starting
emacs...

#+begin_src emacs-lisp
  (use-package xclip)
#+end_src

* Stuff to do when loading

** Environment Variables

Change $EDITOR to use the graphical emacs instance

#+begin_src emacs-lisp
  (setenv "EDITOR" "emacsclient")
#+end_src

* Fixing defaults

** Miscellaneous

*** Swap yes/no prompt with y/n

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Enable all the features

#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

** Aesthetics

*** Colours

#+begin_src emacs-lisp
  (defun set-up-background-colour-please ()
    "Sets background colour to #ffffd0"
    (set-background-color "#ffffd0"))
  (set-background-color "#ffffd0")
  (set-cursor-color "black")
#+end_src

*** GUI ugliness

Disable all the wasteful bars

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (fringe-mode 1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

*** Disable audible and visual bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Tabs

Tabs are 4 spaces wide

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 4)
#+end_src

** Buffers/input

*** ido-mode

ido-mode is much better than the default for switching
buffers and going to files.
# #+begin_src emacs-lisp
#   (setq ido-enable-flex-matching nil)
#   (setq ido-create-new-buffer 'always)
#   (ido-everywhere t)
# #+end_src

*** ibuffer

ibuffer is also a lot better than the default
(plus it has colours)

#+begin_src emacs-lisp
  (bind-key "C-x C-b" 'ibuffer)
#+end_src

** desktop-save

#+begin_src emacs-lisp
  (desktop-save-mode t)
#+end_src

** dired

#+begin_src emacs-lisp
  (setq dired-listing-switches "-lah --group-directories-first")
#+end_src

* Custom functions

** Resizing windows

#+begin_src emacs-lisp
  (defun v-resize (key)
    "interactively resize the window"  
    (interactive "cHit p/n/b/f to resize") 
    (cond                                  
     ((eq key (string-to-char "n"))                      
      (enlarge-window 1)             
      (call-interactively 'v-resize)) 
     ((eq key (string-to-char "p"))                      
      (enlarge-window -1)             
      (call-interactively 'v-resize)) 
     ((eq key (string-to-char "b"))                      
      (enlarge-window-horizontally -1)             
      (call-interactively 'v-resize)) 
     ((eq key (string-to-char "f"))                      
      (enlarge-window-horizontally 1)            
      (call-interactively 'v-resize)) 
     (t (push key unread-command-events))))
  (bind-key "C-c +" 'v-resize)
#+end_src

** Go to config file

Visit your config file. Bound to "C-c e" in =Keybindings= section.

#+begin_src emacs-lisp
  (defun config-visit ()
    "Go to your config.org"
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+end_src

** Reloading config

Reloads this config file. Bound to "C-c r" in Keybindings section.

#+begin_src emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+end_src

** Programming

*** Opening Output

#+begin_src emacs-lisp
  (defun opout ()
    "Opens a pdf file of the same name as the current file"
    (interactive)
    (find-file-other-window (concat
                             (file-name-sans-extension buffer-file-name)
                             ".pdf")))
#+end_src

** Email

#+begin_src emacs-lisp
  (defun mailsync ()
    "Downloads new mail and adds it to the notmuch database"
    (interactive)
    (shell-command "mbsync -a && notmuch new &" "*mailsync*"))
#+end_src

** WM stuff

*** Notification bar replacement

#+begin_src emacs-lisp
  (defun notibar ()
    "Brings up a notification with the following information:
  Date
  Time
  Memory used
  Disk available
  Brightness level
  Volume level
  Battery level"
    (interactive)
    (call-process "notibar"))
#+end_src

*** dmenu

**** dmenu launcher

#+begin_src emacs-lisp
  (defun dmenu_recency ()
    "Launch a program with dmenu"
    (interactive)
    (start-process "dmenu_recency" nil
                   "dmenu_recency"))
#+end_src

**** pdf-opener

This used to just call an external shell script, but I replaced it
with a more emacsy version.

#+begin_src emacs-lisp
  (defun list-documents (&optional dir)
    "Using `find-dired', list all the postscript and pdf files a
  specified directory.  If called interactively, prompt for
  Directory. Else, DIR will default to ~/Documents/."
    (interactive (list (read-directory-name "Find videos where: " "~/Documents/")))
    (unless dir
      (setq dir "~/Documents/"))
    (find-dired dir
                "\\( -iname \\*.ps -o -iname \\*.pdf \\)")
    (dired-hide-details-mode t)
    (setq truncate-lines t))
#+end_src

**** video-opener

This used to just call an external shell script, but I replaced it
with a more emacsy version. In order to open videos externally,
=openwith= must be installed as above.

#+begin_src emacs-lisp
  (defun list-videos (&optional dir)
    "Using `find-dired', list all the videos a specified directory.
  If called interactively, prompt for Directory. Else, DIR will
  default to ~/Downloads/."
    (interactive (list (read-directory-name "Find videos where: " "~/Downloads/")))
    (unless dir
      (setq dir "~/Downloads/"))
    (find-dired dir
                "\\( -iname \\*.mkv -o -iname \\*.avi -o -iname \\*.mp4 -o -iname \\*.webm -o -iname \\*.m4v \\)")
    (dired-hide-details-mode t)
    (setq truncate-lines t))
#+end_src

** Other

*** Xah Lee form feed

#+begin_src emacs-lisp
  (defun show-formfeed-as-pilcrow ()
    "Display the formfeed ^L char as pilcrow (¶)."
    (interactive)
    (progn
      (when (not buffer-display-table)
        (setq buffer-display-table (make-display-table)))
      (aset buffer-display-table ?\^L
            (vconcat (make-list 1 (make-glyph-code ?¶ 'font-lock-comment-face))))
      (redraw-frame)))
#+end_src

** Fixing packages

#+begin_src emacs-lisp
  (defun transmission ()
    "Open a `transmission-mode' buffer."
    (interactive)
    (let* ((name "*transmission*")
           (buffer (or (get-buffer name)
                       (generate-new-buffer name))))
      (transmission-turtle-poll)
      (unless (eq buffer (current-buffer))
        (with-current-buffer buffer
          (unless (eq major-mode 'transmission-mode)
            (condition-case e
                (progn
                  (transmission-mode)
                  (transmission-draw)
                  (goto-char (point-min)))
              (error
               (kill-buffer buffer)
               (signal (car e) (cdr e))))))
        (switch-to-buffer buffer))))
#+end_src

* Major mode hooks and variables

** COMMENT Lilypond mode

Use lilypond mode for .ly files
(taken from lilypond.org)

#+begin_src emacs-lisp
  (require 'lilypond-mode)
  ;; (require 'sane-lilypond-mode)
  (setq auto-mode-alist
        (cons '("\\.ly$" . LilyPond-mode) auto-mode-alist))
  (add-hook 'LilyPond-mode-hook
            (lambda () (interactive)
              (set-comment-column 0)))
#+end_src

** Electric pairs

Auto-add parentheses

#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              ))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (electric-pair-mode t))
#+end_src

** M-x compile hooks

*** Groff

#+begin_src emacs-lisp
  (add-hook 'nroff-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "groff -ms -Tpdf %s > %s" 
                           (shell-quote-argument buffer-file-name)
                           (concat (file-name-sans-extension
                                    (shell-quote-argument
                                     buffer-file-name)) ".pdf")))))
#+end_src

*** C

#+begin_src emacs-lisp
  (add-hook 'c-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "compiler %s" buffer-file-name))))
#+end_src

*** LilyPond

#+begin_src emacs-lisp
  (add-hook 'LilyPond-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "lilypond %s" buffer-file-name))))
#+end_src

*** LaTeX

#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "pdflatex %s" buffer-file-name))))
#+end_src
Somewhat related, overrides latex-mode keybinding that interferes with
my compile key "C-c C-m".

#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook
            (lambda ()
              (local-unset-key (kbd "C-c C-m"))))
#+end_src

* Keybindings

** Alias <menu> to C-x

#+begin_src emacs-lisp
  (bind-key "<menu>" ctl-x-map)
#+end_src

** Interaction with Emacs

*** Terminal functionality

Rebinding some useful keys that can't be used in a terminal.

#+begin_src emacs-lisp
  (unless (window-system)
    ;; Comments -- C-x C-;
    (bind-key "C-c ;" 'comment-line)
    ;; Indentation -- C-M-\"
    (bind-key "C-c \\" 'indent-region))
#+end_src

*** bury-buffer and kill-buffer-and-window

#+begin_src emacs-lisp
  (bind-key "C-z C-z" 'bury-buffer)
  (bind-key "C-z z" 'kill-buffer-and-window)
#+end_src

** Config

#+begin_src emacs-lisp
  (bind-key "C-c r" 'config-reload)
#+end_src

** General WM stuff

*** System information

Built-in battery function with =C-z b=.
Custom notification script with =C-z C-b=. 

#+begin_src emacs-lisp
  (bind-key "C-z b" 'battery)
  (bind-key "C-z C-b" 'notibar)
#+end_src

*** dmenu-ish scripts

A couple of things I used to do with dmenu, now made emacsy.

#+begin_src emacs-lisp
  (bind-keys 
   ("C-z p" . list-documents)
   ("C-z v" . list-videos))
#+end_src

** Programming/Typesetting

Bind emacs compile to =C-c C-m=. This allows 2 rapid presses of =C-m=
or =RET= to skip the prompt.
"opout" is a script to open the output of a file (e.g. TeX,
LilyPond).

#+begin_src emacs-lisp
  (bind-keys
   ("C-c C-m" . compile)
   ("C-c p" . opout))
#+end_src

** Miscellaneous

*** Line numbers

#+begin_src emacs-lisp
  (bind-key "C-c n" 'display-line-numbers-mode)
#+end_src

*** Spelling correction

#+begin_src emacs-lisp
  (bind-key "C-c s" 'flyspell-mode)
#+end_src

*** Line wrap

#+begin_src emacs-lisp
  (bind-key "C-c l" 'toggle-truncate-lines)
#+end_src

* Mode-line

Just some basic extra stuff in the mode-line.
I don't want anything fancy.

#+begin_src emacs-lisp
  (column-number-mode t)
  (display-time-mode t)
  (setq display-time-24hr-format 1)
#+end_src

* Email

email settings

#+begin_src emacs-lisp
  (setq send-mail-function 'sendmail-send-it
        sendmail-program "/usr/bin/msmtp"
        mail-specify-envelope-from t
        message-sendmail-envelope-from 'header
        mail-envelope-from 'header)

#+end_src
