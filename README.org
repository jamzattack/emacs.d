#+TITLE: Emacs Configuration
#+AUTHOR: Jamie Beardslee <beardsleejamie@gmail.com>
#+PROPERTY: header-args:emacs-lisp :tangle lisp/config.el :comments org

This is my emacs config file. It is written in org-mode so that I can
brag about how dope org-mode is. [[file:README.org][This file]] contains my main
configuration, which is tangled to [[file:lisp/config.el][config.el]].  [[file:init.el][init.el]] sets the
variable =custom-file= to [[file:custom.el][custom.el]], loads [[file:lisp/config.el][config.el]], and then loads
[[file:custom.el][custom.el]].

Note: [[file:custom.el][custom.el]] should not be edited manually, as it is used by emacs
for settings changed using the customisation interface.

My own packages and other things that I need to =require= are housed
in [[file:lisp][lisp/]]. I have added the [[file:elpa][elpa/]] directory for convenience, but it
would be wise to remove it and recompile everything by evaluating
[[file:config.el][config.el]].

* Startup

Some things to do before everything else.

** Prefix keys

A couple of prefix keys. It's useful to set these up early, so that
you don't get any errors i.e "C-z is not a valid prefix key".

*** Remove =C-z=

Unbind =C-z= before anything else, so that I can use it as a prefix
key.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

*** Alias <menu> to C-x

Make the menu key do the same as C-x.

#+begin_src emacs-lisp
  (global-set-key (kbd "<menu>") ctl-x-map)
#+end_src

** Repositories and initialisation

Enable melpa archive and making sure packages work.

#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "lisp"))
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")))
  (package-initialize)
#+end_src

** Use-package and bind-key

Install use-package and bind-key if not installed. bind-key is only
needed when byte-compiling for some reason.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (package-install 'diminish))

  (setq personal-keybindings nil)
#+end_src

** Fonts

This section has been moved to [[file:lisp/fonts.el][its own file]]

#+begin_src emacs-lisp
  (defvar fonts-file (concat user-emacs-directory "lisp/fonts.el")
    "This is the file to load custom font settings from")

  (defun set-up-fonts-please ()
    (interactive)
    (load fonts-file))

  (add-hook 'server-after-make-frame-hook 'set-up-fonts-please)
#+end_src

* Packages

The biggest section of this file. This is where almost everything
goes. Use-package is not only useful for configuring ELPA packages,
but anything that can be (require)d.

** Built-in

This is the section for built-in packages. A lot of these are just
minor things such as setting a single variable.

*** Major editing modes

Major modes for text editing. For non-editing major modes, see
[[Applications]]

**** Org Mode

Open source blocks and stuff in the current window. Use tab from the
language's major mode inside source blocks.

#+begin_src emacs-lisp
  (use-package org
    :custom ((org-src-window-setup 'current-window)
             (org-src-tab-acts-natively t))
    :config (when (featurep 'org-tempo)
              (require 'org-tempo)))
#+end_src

***** Org Capture

Take notes in org-mode with specific templates and write them to a
file. Similar to remember.

#+begin_src emacs-lisp
  (use-package org-capture
    :after (org)
    :custom ((org-default-notes-file "~/org/notes.org")
             (org-capture-templates
              `(("t" "Todo" entry (file+headline ,(concat org-directory
                                                          "/todo.org") "Tasks")
                 "* TODO %?\n  %i\n  %a")
                ("n" "Notes" entry (file+datetree ,(concat org-directory
                                                           "/notes.org"))
                 "* %?\nEntered on %U\n  %i\n  %a")
                ("d" "Diary" entry (file+datetree ,(concat org-directory
                                                           "/diary.org"))
                 "* %?\nEntered on %U\n  %i\n  %a")))
             (org-capture-bookmark nil))
    :bind (("C-x M-r" . org-capture)))
#+end_src

***** Org indent

Better layout for org-mode.

#+begin_src emacs-lisp
  (use-package org-indent
    :after (org)
    :diminish
    :hook (org-mode . org-indent-mode))
#+end_src

***** Org-babel lilypond

ob-lilypond is required to evaluate lilypond within org-mode. It isn't
loaded by default, so load it here.

#+begin_src emacs-lisp
  (when (executable-find "lilypond")
    (use-package ob-lilypond))
#+end_src

**** prolog

Major mode for editing prolog files. Files ending in ~.pl~ open in
prolog-mode.

#+begin_src emacs-lisp
  (use-package prolog
    :after (init)
    :mode ("\\.pl\\'" . prolog-mode))
#+end_src

**** cc-mode

Set the c style to bsd, which uses tabs. Use java/awk indentation
for java/awk files.

#+begin_src emacs-lisp
  (use-package cc-mode
    :custom
    ((c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (other . "bsd")))))
#+end_src

**** Emacs lisp mode

Make the scratch buffer use emacs-lisp-mode.  Note: Most of my elisp
keybindings are now in my package [[file:lisp/selime/selime.el][selime]].

#+begin_src emacs-lisp
  (use-package elisp-mode
    :custom (initial-major-mode 'emacs-lisp-mode))
#+end_src

*** Minor modes for programming

Minor modes that help with writing programs.

**** Auto-insert

Insert boilerplate code/comments automatically.

#+begin_src emacs-lisp
  (use-package autoinsert
    :config (auto-insert-mode t))
#+end_src

**** compile

Bind =C-z RET= and =f9= to compile.

#+begin_src emacs-lisp
  (use-package compile
    :bind (("C-z C-m" . compile)
           ("<f9>" . compile)))
#+end_src

**** hi-lock

I often use =M-s h .= to see where variables, functions, etc. are
used. However, paredit remaps =M-s= to =paredit-splice-sexp=, so I
turn on hi-lock-mode which enables the =C-x w= prefix.

#+begin_src emacs-lisp
  (use-package hi-lock
    :diminish
    :config (global-hi-lock-mode))
#+end_src

*** Applications

This section is for elisp programs that have an interface of their
own, rather than being just a major/minor mode.

**** EWW

Elisp web browser - I just set some variables to make eww the default
browser, and change the width to 80 columns.

#+begin_src emacs-lisp
  (use-package eww
    :defer nil
    :bind (:map eww-mode-map
                ("M-n" . forward-paragraph)
                ("M-p" . backward-paragraph))
    :custom ((browse-url-browser-function 'eww-browse-url)
             (shr-width 80)
             (shr-use-colors nil)))
#+end_src

**** ERC

The only reason for this to be here is to set my nick.

#+begin_src emacs-lisp
  (use-package erc
    :custom (erc-nick "jamzattack")
    :config
    (add-to-list 'erc-modules 'notifications)
    (erc-track-mode))
#+end_src

***** erc notifications

erc-notify enables notifications for erc conversations. I only enable
it if the executable "dunst" is found, because it will crash emacs
unless a notification daemon is active.

#+begin_src emacs-lisp
  (use-package erc-notify
    :after erc
    :config
    (when (executable-find "dunst")
      (erc-notify-enable)))
#+end_src

**** Info

Rebind M-p and M-n to move by paragraphs. By default M-n runs
=clone-buffer=, which I find to be completely useless.

#+begin_src emacs-lisp
  (use-package info
    :bind (:map Info-mode-map
                ("M-p" . backward-paragraph)
                ("M-n" . forward-paragraph)))
#+end_src

**** ibuffer

Ibuffer is an interface similar to dired, but for editing your open
buffers.

#+begin_src emacs-lisp
  (defun ibuffer-filter-helm ()
    (with-current-buffer (get-buffer "*Ibuffer*")
      (ibuffer-mark-by-mode 'helm-major-mode)
      (ibuffer-do-kill-lines)))

  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer)
    :hook (ibuffer . ibuffer-filter-helm))
#+end_src

**** dired

Group directories first. This works only with GNU ls, so don't use
this if you use a different version.

#+begin_src emacs-lisp
  (use-package dired
    :defer t
    :custom ((dired-listing-switches "-lah --group-directories-first")
             (delete-by-moving-to-trash t))
    :bind ([remap list-directory] . dired-jump))
#+end_src

***** dired-async

Make dired run actions in the background.

#+begin_src emacs-lisp
  (use-package dired-async
    :config (dired-async-mode))
#+end_src

*** Shells

Shells in emacs - both shell and eshell settings are here.

**** shell

I don't want the shell buffer to open a new window, so add an entry in
=display-buffer-alist=.

#+begin_src emacs-lisp
  (use-package shell
    :config
    (add-to-list 'display-buffer-alist
                 '("^\\*shell\\*$" . (display-buffer-same-window))))
#+end_src

**** eshell

Change the history size to 1000, custom keybinding to either
delete-char or kill-buffer like a "normal" shell.

#+begin_src emacs-lisp
  (use-package eshell
    :custom (eshell-history-size 1000)
    :config
    (defun eshell-delete-or-quit (arg)
      "If point is at the end of the buffer and input is empty,
  kill the buffer. Just like giving EOF to a normal shell."
      (interactive "p")
      (if (=
           (save-excursion
             (eshell-bol)
             (point))
           (point)
           (point-max))
          (kill-buffer (current-buffer))
        (delete-char arg)))
    (defun eshell/clear-please ()
      "Similar to `eshell/clear', but keeps the current input."
      (interactive)
      (save-excursion
        (eshell-bol)
        (forward-line -1)
        (end-of-line)
        (insert (make-string (window-height) ?\n))))
    :bind (:map eshell-mode-map
                ("C-d" . eshell-delete-or-quit)
                ("C-c M-l" . eshell/clear-please)))
#+end_src

*** Saving the state of emacs

Packages that save where you were - recentf saves a list of edited
files, and desktop saves a list of variables and current buffers.

**** recentf

This package saves a list of recently visited files. I've had some
problems with helm not loading the recentf list, so it is done here.

#+begin_src emacs-lisp
  (use-package recentf
    :config (recentf-load-list))
#+end_src

**** Desktop

Save list of buffers and some variables when exiting emacs.  Don't
save a list of frames, that just ends up spamming me with extra frames
everywhere.

#+begin_src emacs-lisp
  (use-package desktop
    :custom (desktop-restore-frames nil)
    :config
    (add-to-list 'desktop-globals-to-save 'helm-ff-history)
    (add-to-list 'desktop-globals-to-save 'extended-command-history)
    (desktop-save-mode t))
#+end_src

*** Interface tweaks

Some settings for the UI of emacs - mode-line, scroll-bar, etc

**** time

Display the current time in the mode-line, and make it use 24-hour
time.

#+begin_src emacs-lisp
  (use-package time
    :custom (display-time-24hr-format t)
    :config (display-time-mode t))
#+end_src

**** scroll bar

I've started to use scroll-bar-mode. It's not so bad if the width is
small enough.

#+begin_src emacs-lisp
  (use-package scroll-bar
    :custom ((scroll-bar-mode 'right)
             (scroll-bar-width 6 t))
    :config (scroll-bar-mode -1))
#+end_src

**** battery

Show battery information with =C-z b=, and show percentage in the
mode-line.

#+begin_src emacs-lisp
  (use-package battery
    :bind (("C-z b" . battery))
    :config (display-battery-mode t))
#+end_src

*** environment variables

Set the $EDITOR to emacsclient. Because I (almost) only use other
programs from within Emacs, this works. If you don't use EXWM it would
be advisable to set this in your xinitrc.

#+begin_src emacs-lisp
  (use-package env
    :config
    (setenv "EDITOR" "emacsclient")
    (setenv "PAGER" "cat"))
#+end_src

*** window

These functions are both quite useful, so I bound them to similar
keys.

#+begin_src emacs-lisp
  (use-package window
    :bind (("C-z C-z" . bury-buffer)
           ("C-z z" . kill-buffer-and-window)))
#+end_src

*** view-mode

I like using view-mode and scroll-lock-mode is kind-of useless, so I
rebind Scroll_Lock to toggle view-mode.

Also enable view-mode if a buffer is read-only.

#+begin_src emacs-lisp
  (use-package view
    :bind (("<Scroll_Lock>" . view-mode))
    :custom (view-read-only t))
#+end_src

** My packages

Not necessarily /my/ packages, but packages that are in the [[file:lisp/][lisp]]
directory.

*** Internet

A selection of packages to facilitate searching and browsing the web
within emacs.

**** dmenu-handler

A way to open URLs the way I want. I bind it to =C-z d=.

Located [[file:lisp/dmenu/dmenu-handler.el][here.]]

#+begin_src emacs-lisp
  (use-package dmenu-handler
    :load-path "lisp/dmenu"
    :after eww
    :bind
    (("C-z d" . 'dmenu-handler)
     ("C-z C-d" . 'dmenu-handler)
     (:map eww-mode-map
           ("f" . 'dmenu-handler-stream)
           ("D" . 'dmenu-handler-download-video)
           ("A" . 'dmenu-handler-audio))))
#+end_src

**** library-genesis

My custom package for searching library genesis. I bind ~C-z l~ to a
search.

Located [[file:lisp/library-genesis.el][here.]]

#+begin_src emacs-lisp
  (use-package library-genesis
    :bind (("C-z l" . library-genesis-search)))
#+end_src

**** search-query

My own search-query package. It simply provides a few functions so
that I don't need to use DuckDuckGo's bangs, and for websites that
don't have a bang.

Located [[file:lisp/search-query.el][here.]]

#+begin_src emacs-lisp
  (use-package search-query
    :bind (("C-z t" . tpd-search)
           ("C-z C-t" . tpd-search)
           ("C-z y" . youtube-search)
           ("C-z C-y" . youtube-search)
           ("C-z w" . wikipedia-search)
           ("C-z C-w" . wiktionary-word)))
#+end_src

**** reddit-browse

This is a very minimal package to ease the use of reddit within eww.
It uses the old reddit mobile site, which works well with eww.

#+begin_src emacs-lisp
  (use-package reddit-browse
    :custom (reddit-subreddit-list '("emacs" "lisp" "lispmemes"
                                     "vxjunkies" "linux" "nethack"
                                     "cello" "throwers"))
    :bind ("C-z r" . reddit-goto-subreddit))
#+end_src

*** Toggle-touchpad

A simple package I wrote to toggle the touchpad/trackpoint on my
ThinkPad

Located [[file:lisp/toggle-touchpad.el][here.]]

#+begin_src emacs-lisp
  (use-package toggle-touchpad
    :load-path "lisp"
    :bind
    (("<XF86TouchpadToggle>" . 'toggle-touchpad)
     ("C-z \\" . 'toggle-touchpad)))
#+end_src

*** lilypond-mode

I copied lilypond-mode into my custom directory for the machines that
don't have lilypond installed.

Located [[file:lisp/lilypond-mode][here.]]

#+begin_src emacs-lisp
  (use-package lilypond-mode
    :load-path "lisp/lilypond-mode"
    :init
    (defun custom-lilypond-setup ()
      "Sets the buffer's comile command and comment-column."
      (setq-local compile-command
                  (format "lilypond %s" buffer-file-name))
      (setq-local comment-column 0))
    :defer 20
    :mode ("\\.ly\\'" . LilyPond-mode)
    :hook (LilyPond-mode . custom-lilypond-setup)
    :config
    (defun LilyPond-command-view ()
      (interactive)
      (let ((master-file (or LilyPond-master-file
                             buffer-file-name)))
        (find-file-other-window (concat
                                 (file-name-sans-extension master-file)
                                 ".pdf")))))
#+end_src

**** lilypond-skel

My small package that provides an auto-insert skeleton for lilypond.

#+begin_src emacs-lisp
  (use-package lilypond-skel
    :load-path "lisp/skeletons/"
    :after (lilypond-mode auto-insert))
#+end_src

*** Arch Linux settings

This file just adds a few auto-mode-alist entries for systemd and
pacman files.

Located [[file:lisp/arch-linux-settings.el][here.]]

#+begin_src emacs-lisp
  (use-package arch-linux-settings
    :load-path "lisp")
#+end_src

*** Custom EXWM config

My custom settings for EXWM - not much different from the
=exwm-config-default=, but doesn't get in my way as much. It provides
the function =custom-exwm-config= which is used in [[EXWM - Emacs X Window Manager][EXWM]].

Located [[file:lisp/custom-exwm-config.el][here.]]

#+begin_src emacs-lisp
  (use-package custom-exwm-config
    :load-path "lisp")
#+end_src

*** Miscellaneous functions

A number of functions that don't necessarily have a proper home.  Bind
=C-c p= to open the pdf output of a typesetting program, and =C-h M-a=
to run the external "apropos" command (not to be confused with elisp
apropos).

Located [[file:lisp/my-misc-defuns][here]].

#+begin_src emacs-lisp
  (use-package my-misc-defuns
    :defer nil
    :bind (("C-h M-a" . system-apropos)
           ("C-c p" . open-pdf-of-current-file)
           (:map org-mode-map
                 ("C-c e" . eww-open-html-of-current-file))))
#+end_src

*** Selime

This is my package to make elisp evaluation and documentation lookup a
bit more like slime.  It's often not necessary, but sometimes I find
myself using =C-c C-d C-f= to describe an elisp function, etc.

#+begin_src emacs-lisp
  (use-package selime
    :load-path "lisp/selime"
    :hook (emacs-lisp-mode . selime-mode))
#+end_src

** ELPA Packages

This is where the packages installed within emacs are located. All of
these use the =:ensure= keyword, so that they are downloaded if they
aren't already.

*** HELM

Rebind a few keys in order to make use of helm's features. Stuff like
find-files and switch-to-buffer. Also remap =C-x k= to
kill-this-buffer, because I use helm-mini to kill other buffers.

I also bind M-C-y to helm-show-kill-ring. I tried to use this to
replace yank-pop but the latter is too engrained in my fingers.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :diminish
    :custom ((helm-completion-style 'emacs)
             (helm-describe-variable-function 'helpful-variable)
             (helm-describe-function-function 'helpful-callable))
    :init
    (defun kill-this-buffer-please ()
      "Actually kill this buffer, unlike `kill-this-buffer' which
  sometimes doesn't work."
      (interactive)
      (kill-buffer (current-buffer)))
    :config
    (require 'helm-config)
    (helm-mode t)
    :bind (([remap execute-extended-command] . 'helm-M-x)
           ("<menu><menu>" . 'helm-M-x)
           ("M-s M-o" . 'helm-occur)
           ([remap switch-to-buffer] . 'helm-mini)
           ([remap kill-buffer] . 'kill-this-buffer-please)
           ([remap find-file] . 'helm-find-files)
           ([remap bookmark-jump] . 'helm-filtered-bookmarks)
           ("M-C-y" . 'helm-show-kill-ring)
           :map helm-map
           ("C-h c" . 'describe-key-briefly)))
#+end_src

**** Helm system packages

Provides an abstraction layer for viewing and installing system
packages.

#+begin_src emacs-lisp
  (use-package helm-system-packages
    :ensure t
    :after helm
    :bind (("C-h C-p" . helm-system-packages)))
#+end_src

**** Helm notmuch

A helm interface for notmuch. Load it after both helm and notmuch (of
course).

#+begin_src emacs-lisp
  (use-package helm-notmuch
    :ensure t
    :after (helm notmuch))
#+end_src

**** Helm man

Remap =C-h C-m= to helm-man-woman, a helm interface for selecting
manpages.

#+begin_src emacs-lisp
  (use-package helm-man
    :after (helm)
    :custom (man-width 80)
    :bind ("C-h C-m" . 'helm-man-woman))
#+end_src

**** Helm eww

Some helm functions for eww. I replace all the default functions with
the helm alternatives.

#+begin_src emacs-lisp
  (use-package helm-eww
    :ensure t
    :bind (("C-x r e" . helm-eww-bookmarks)
           (:map eww-mode-map
                 ("B" . helm-eww-bookmarks)
                 ("H" . helm-eww-history)
                 ("S" . helm-eww-buffers))))
#+end_src

**** Helm org

=C-c M-o= in org-mode runs the function =helm-org-in-buffer-headings=.
Similar to =occur=, but only shows headings.

#+begin_src emacs-lisp
  (use-package helm-org
    :ensure t
    :after helm
    :bind (:map org-mode-map
                ("C-c M-o" . helm-org-in-buffer-headings)))
#+end_src

*** Helpful

Helpful gives a whole lot more information than describe-*. I also
bind =C-h SPC= to helpful-at-point, just to save a keypress here and
there.

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind (([remap describe-function] . helpful-callable)
           ([remap describe-variable] . helpful-variable)
           ([remap describe-key] . helpful-key)
           ("C-h SPC" . helpful-at-point)))
#+end_src

*** Major Modes

**** Nov.el - epub in emacs

Read epub files in emacs. I set this up as the default mode for epubs,
and set the default width to 80C.

#+begin_src emacs-lisp
  (use-package nov
    :ensure t
    :custom (nov-text-width 80)
    :mode ("\\.epub\\'" . nov-mode))
#+end_src

**** PDF-tools

Majorly increases performance when viewing pdfs within Emacs, and
provides some note-taking facilities.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :hook (pdf-view-mode . auto-revert-mode)
    :config
    (pdf-tools-install))
#+end_src

**** Markdown

A very featureful major mode for markdown files.  I only really use it
for looking at READMEs though, so I add view-mode to the hook.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :hook (markdown-mode . view-mode))
#+end_src

*** Programming

**** Geiser

Interact with scheme in a powerful and emacsy way. I set guile as the
default scheme program.

#+begin_src emacs-lisp
  (use-package geiser
    :ensure t
    :custom ((scheme-program-name (if (executable-find "guile3.0")
                                      "guile3.0"
                                    "guile"))
             (geiser-default-implementation 'guile)))
#+end_src

**** SLIME

Interact with common lisp in a powerful and emacsy way. I set sbcl as
the default lisp program, add some fancier stuff such as a nicer REPl,
and move the history file out of $HOME.

#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :custom ((inferior-lisp-program "sbcl")
             (slime-contribs '(slime-fancy))
             (slime-completion-at-point-functions
              '(slime-simple-completion-at-point))
             (slime-repl-history-file "~/.cache/slime/history")
             (common-lisp-hyperspec-root (when (file-exists-p "/usr/share/doc/HyperSpec/")
                                           "file:///usr/share/doc/HyperSpec/")))
    :config
    (defun slime-repl-or-run-slime ()
      (interactive)
      (if (slime-connected-p)
          (slime-switch-to-output-buffer)
        (slime)))
    :bind (:map slime-mode-map
                ("C-c C-z" . slime-repl-or-run-slime)))
#+end_src

**** paredit

Efficient and clever editing commands for working with
s-expressions. Enabled for lisp modes only.

#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :diminish
    :hook ((emacs-lisp-mode . paredit-mode)
           (lisp-interaction-mode . paredit-mode)
           (ielm-mode . paredit-mode)
           (eval-expression-minibuffer-setup . paredit-mode)
           (lisp-mode . paredit-mode)
           (slime-repl-mode . paredit-mode)
           (scheme-mode . paredit-mode)))
#+end_src

**** elf-mode

Major mode for viewing ELF files (compiled binaries).  I don't use it
often, but it's nice to be able to see what a program does sometimes.

#+begin_src emacs-lisp
  (use-package elf-mode
    :ensure t
    :config (elf-setup-default))
#+end_src

*** Org

**** Github markdown

Export to markdown.

#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure t)
#+end_src

**** Html export

Export to html.

#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

*** EXWM - Emacs X Window Manager

Manipulate X windows as emacs buffers.  I don't use (exwm-init) here,
in case I decide to use another wm.  Eval '(exwm-init)' when starting
the EXWM frame. i.e. in ~.xinitrc

#+begin_src emacs-lisp
  (use-package exwm
    :after (custom-exwm-config)
    :ensure t
    :config
    (custom-exwm-config))
#+end_src

**** Desktop-environment (useful with EXWM)

This package sets up volume keys, brightness keys, and a screen
locker. I like i3lock, and want it to use my theme's background
colour.

#+begin_src emacs-lisp
  (defun custom-screenlock-command ()
    (let ((color (face-attribute 'default :background)))
      (setq desktop-environment-screenlock-command
            (format "i3lock -c '%s' -n"
                    (with-temp-buffer
                      (insert (if
                                  (= (length color) 7)
                                  color
                                "#000000"))
                      (beginning-of-line)
                      (delete-char 1)
                      (buffer-string))))))

  (use-package desktop-environment
    :ensure t
    :diminish
    :config
    (defadvice desktop-environment-lock-screen
        (before change-bg-color activate)
      (custom-screenlock-command))
    (desktop-environment-mode))
#+end_src

*** "Applications"

**** vterm

A performant terminal emulator in emacs. unfortunately, it still
doesn't play nice with complicated things such as nethack.

The function =eshell/vterm= starts a program in vterm from eshell.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (defun eshell/vterm (&rest args)
      "Launch a program from eshell using vterm."
      (interactive)
      (let* ((program (mapconcat 'identity args " "))
             (vterm-shell program))
        (vterm (format "*%s*" program)))))
#+end_src

**** libmpdee

An mpd library. I use it only for random/shuffle.

#+begin_src emacs-lisp
  (use-package libmpdee
    :ensure t)
#+end_src

**** MPDel

A more flexible mpd client than mingus.

#+begin_src emacs-lisp
  (use-package mpdel
    :ensure t
    :after libmpdee
    :bind-keymap (("s-m" . mpdel-core-map))
    :bind (("s-a" . mpdel-core-open-albums)
           ("<XF86AudioPlay>" . libmpdel-playback-play-pause)
           ("<XF86AudioPrev>" . libmpdel-playback-previous)
           ("<XF86AudioNext>" . libmpdel-playback-next)
           (:map mpdel-core-map
                 ("Z" . mpd-shuffle-playlist)
                 ("z" . mpd-toggle-random)
                 ("C-d" . mpdel-core-open-directories))))
#+end_src

**** Notmuch

A simple email client, with emphasis on searching

#+begin_src emacs-lisp
  (use-package notmuch
    :ensure t
    :after eww
    :config
    (setq notmuch-archive-tags '("-unread" "-inbox")
          notmuch-search-oldest-first nil)
    :bind
    (:map notmuch-show-mode-map
          ("u" . eww-follow-link)))
#+end_src

**** Transmission

An emacs front-end for the transmission bittorrent daemon

#+begin_src emacs-lisp
  (use-package transmission
    :ensure t
    :after (eww)
    :config
    (defun transmission-add-url-at-point (url)
      "Adds torrent if point is on a magnet link"
      (interactive (list (shr-url-at-point nil)))
      (transmission-add url))
    :bind (:map eww-mode-map
                ("m" . transmission-add-url-at-point)))
#+end_src

*** Appearance

**** Rainbow-mode

This package highlights hex colours
(also install xterm-color to use in a terminal emulator)

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :bind (("C-c h" . 'rainbow-mode)))
#+end_src

**** Rainbow-delimiters

Minor mode that highlights parentheses well

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

**** Dim (unclutter mode-line)

From Alezost, remove clutter in the mode-line.

#+begin_src emacs-lisp
  (use-package dim
    :ensure t
    :config
    (dim-major-names
     '((lisp-interaction-mode "eλ")
       (emacs-lisp-mode    "el")
       (lisp-mode          "cl")
       (scheme-mode        "scm")
       (org-mode           "org")
       (Info-mode          "info")
       (ibuffer-mode       "ibu")
       (LilyPond-mode      "ly")
       (lilypond-mode      "ly")
       (help-mode          "?")))
    (dim-minor-names
     '((auto-fill-function " ^M")
       (isearch-mode       " ^S")
       (helm-mode          "" helm)
       (paredit-mode       "" paredit)
       (god-local-mode     " ∞")
       (org-src-mode       " *" org)
       (desktop-environment-mode "" desktop-environment)
       (eldoc-mode         ""    eldoc))))
#+end_src

**** Dimmer (dim inactive buffers)

Dims inactive buffers, so that you can more clearly see which window
you're in (sometimes the mode-line just doesn't cut it).

#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :custom (dimmer-fraction 0.3)
    :config (dimmer-mode t))
#+end_src

*** Quality of life

**** scratch

scratch allows you to create a scratch buffer - either in the major
mode of the current buffer, or (with prefix arg) in the major mode of
your choice.

#+begin_src emacs-lisp
  (use-package scratch
    :ensure t
    :bind (("C-z s" . scratch)
           ("C-z C-s" . scratch)))
#+end_src

**** edwina

My PR has been merged! I can now use the MELPA package.

#+begin_src emacs-lisp
  (use-package edwina
    :ensure t
    :config
    (edwina-setup-dwm-keys 'super)
    (edwina-mode 0))
#+end_src

**** 0x0

Provides some functions to upload to [[http://0x0.st][0x0.st]]

#+begin_src emacs-lisp
  (use-package 0x0
    :ensure t)
#+end_src

*** fish completion

fish completion allows eshell and shell buffers to use [[https://fishshell.com/][fish]]
completion. fish must be installed.

#+begin_src emacs-lisp
  (use-package fish-completion
    :after eshell
    :ensure t
    :config
    (global-fish-completion-mode))
#+end_src

*** system-packages

system-packages allows updating, installing, and removing programs
installed with your system's package manager.

#+begin_src emacs-lisp
  (use-package system-packages
    :ensure t)
#+end_src

*** Not really useful

**** Lorem Ipsum

A 'Lorem ipsum' generator

#+begin_src emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+end_src

* Fixing defaults

** Miscellaneous

*** Swap yes/no prompt with y/n

Typing yes/no is an inconvenience that can be avoided. Alias it to y/n

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Enable all the features

Disable the annoying "This is an advanced feature" thing.  It seems so
dumb that this feature exists.

#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

** Aesthetics

*** GUI ugliness

Disable all the wasteful bars.  I've actually started liking the
scroll bar (with-x-toolkit=no), so just the menu bar and tool bar.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

*** Disable audible and visual bell

Don't ring the damn bell.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** show-paren

Highlight matching parentheses.

#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src

* Major mode hooks and variables

** M-x compile hooks

*** Groff

I usually use the ms macros when writing something, but I usually just
use org-mode anyway.

#+begin_src emacs-lisp
  (add-hook 'nroff-mode-hook
            (lambda ()
              (setq-local compile-command
                          (format "groff -ms -Tpdf %s > %s"
                                  (shell-quote-argument buffer-file-name)
                                  (concat (file-name-sans-extension
                                           (shell-quote-argument
                                            buffer-file-name)) ".pdf")))))
#+end_src

*** LaTeX

Compile latex files with pdflatex.

#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook
            (lambda ()
              (setq-local compile-command
                          (format "pdflatex %s" buffer-file-name))))
#+end_src

* Keybindings

** Config

Reload [[file:lisp/config.el][config file]] 

#+begin_src emacs-lisp
  (bind-key "C-c r" 'config-load)
#+end_src

** Miscellaneous

*** Line numbers

Display line numbers. I prefer to just use the mode-line because it
doesn't slow down emacs as much.

#+begin_src emacs-lisp
  (bind-key "C-c n" 'display-line-numbers-mode)
#+end_src

*** Line wrap

Simple keybinding to wrap/unwrap lines.

#+begin_src emacs-lisp
  (bind-key "C-c l" 'toggle-truncate-lines)
#+end_src

* Mode-line

Just some basic extra stuff in the mode-line.
I don't want anything fancy.

#+begin_src emacs-lisp
  (column-number-mode t)
#+end_src

* Email

email settings

#+begin_src emacs-lisp
  (setq send-mail-function 'sendmail-send-it
        sendmail-program "/usr/bin/msmtp"
        mail-specify-envelope-from t
        message-sendmail-envelope-from 'header
        mail-envelope-from 'header)
#+end_src

* Making this requirable

This file can be loaded with (require 'config.el) if it is in the
load-path. This is better than explicitly loading config.el because it
will use the byte-compiled version.

#+begin_src emacs-lisp
  (provide 'config.el)
#+end_src
