#+TITLE: Emacs Configuration
#+AUTHOR: Jamie Beardslee <beardsleejamie@gmail.com>
#+PROPERTY: header-args:emacs-lisp :tangle config.el :comments org

This is my emacs config file. It is written in org-mode so that I can
brag about how dope org-mode is. [[file:README.org][This file]] contains my main
configuration, which is tangled to [[file:config.el][config.el]].  [[file:init.el][init.el]] sets the
variable =custom-file= to [[file:custom.el][custom.el]], loads [[file:config.el][config.el]], and then loads
[[file:custom.el][custom.el]].

Note: [[file:custom.el][custom.el]] should not be edited manually, as it is used by emacs
for settings changed using the customisation interface.

My own packages and other things that I need to =require= are housed
in [[file:lisp][lisp/]]. I have added the [[file:elpa][elpa/]] directory for convenience, but it
would be wise to remove it and recompile everything by evaluating
[[file:config.el][config.el]].

* Prefix keys
** Remove =C-z=

Unbind =C-z= before anything else, so that I can use it as a prefix
key.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Alias <menu> to C-x

#+begin_src emacs-lisp
  (bind-key "<menu>" ctl-x-map)
#+end_src

* Packages

** Startup

*** Repositories and initialisation

Enable melpa archive and making sure packages work

#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "lisp"))
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")))
  (package-initialize)
#+end_src

*** Use-package

Install use-package if not installed

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

*** Fonts

This section has been moved to a different file: =./config/fonts.el=

#+begin_src emacs-lisp
  (defvar fonts-file (concat user-emacs-directory "config/fonts.el")
    "This is the file to load custom font settings from")

  (defun set-up-fonts-please ()
    (interactive)
    (load fonts-file))

  (set-up-fonts-please)
#+end_src

** Built-in

*** Org Mode

Open source blocks and stuff in the current window. Use tab from the
language's major mode inside source blocks.

#+begin_src emacs-lisp
  (use-package org
    :after (init)
    :custom ((org-src-window-setup 'current-window)
             (org-src-tab-acts-natively t))
    :hook (org-mode . org-indent-mode)
    :config (require 'org-tempo))
#+end_src

**** Org Capture

Take notes in org-mode with specific templates and write them to a
file. Similar to remember.

#+begin_src emacs-lisp
  (use-package org-capture
    :after (org)
    :custom ((org-default-notes-file "~/org/notes.org")
             (org-capture-templates
              `(("t" "Todo" entry (file+headline ,(concat org-directory
                                                          "/todo.org") "Tasks")
                 "* TODO %?\n  %i\n  %a")
                ("n" "Notes" entry (file+datetree ,(concat org-directory
                                                           "/notes.org"))
                 "* %?\nEntered on %U\n  %i\n  %a")
                ("d" "Diary" entry (file+datetree ,(concat org-directory
                                                           "/diary.org"))
                 "* %?\nEntered on %U\n  %i\n  %a")))
             (org-capture-bookmark nil))
    :bind (("C-x M-r" . org-capture)))
#+end_src

*** EWW

A browser written in elisp!  I need to load this after everything
else, so that I can bind a couple of functions.

#+begin_src emacs-lisp
  (use-package eww
    :custom ((browse-url-browser-function 'eww-browse-url)
             (shr-width 80))
    :bind
    (("C-x r e" . 'eww-list-bookmarks)))
#+end_src

*** ERC

The only reason for this to be here is to set my nick.

#+begin_src emacs-lisp
  (use-package erc
    :after (init)
    :custom (erc-nick "jamzattack"))
#+end_src

*** recentf

I don't really understand recentf, but this loads it in case I need
it.

#+begin_src emacs-lisp
  (use-package recentf
    :after (init)
    :config (recentf-load-list))
#+end_src

*** prolog

Major mode for editing prolog files. Files ending in ~.pl~ open in
prolog-mode.

#+begin_src emacs-lisp
  (use-package prolog
    :after (init)
    :mode ("\\.pl\\'" . prolog-mode))
#+end_src

*** ibuffer

Ibuffer is an interface similar to dired, but for editing your open
buffers.

#+begin_src emacs-lisp
  (defun ibuffer-filter-helm ()
    (with-current-buffer (get-buffer "*Ibuffer*")
      (ibuffer-mark-by-mode 'helm-major-mode)
      (ibuffer-do-kill-lines)))

  (use-package ibuffer
    :after (init)
    :bind ("C-x C-b" . ibuffer)
    :hook (ibuffer . ibuffer-filter-helm))
#+end_src

*** COMMENT ido

I've switched to helm now, but this is a comment for the times when
I'd prefer to use ido.

#+begin_src emacs-lisp
  (use-package ido
    :init (require 'ido-bookmark-jump)
    :bind ("C-x r b" . ido-bookmark-jump)
    :config (ido-everywhere t)
    :custom (max-mini-window-height 1))
#+end_src

*** scroll bar

I've started to use scroll-bar-mode. It's not so bad if the width is
small enough.

#+begin_src emacs-lisp
  (use-package scroll-bar
    :custom ((scroll-bar-mode 'right)
             (scroll-bar-width 6 t)))
#+end_src

*** environment variables

#+begin_src emacs-lisp
  (use-package env
    :config
    (setenv "EDITOR" "emacsclient"))
#+end_src

*** compile

Bind =C-z RET= and =f9= to compile.

#+begin_src emacs-lisp
  (use-package compile
    :bind (("C-z C-m" . compile)
           ("<f9>" . compile)))
#+end_src

** My packages

*** Toggle-touchpad

A simple package I wrote to toggle the touchpad/trackpoint on my
ThinkPad

#+begin_src emacs-lisp
  (use-package toggle-touchpad
    :load-path "lisp"
    :after (init)
    :defer t
    :bind
    (("<XF86TouchpadToggle>" . 'toggle-touchpad)
     ("C-z \\" . 'toggle-touchpad)))
#+end_src

*** dmenu-handler

A way to open URLs the way I want. I bind it to =C-z d=.

#+begin_src emacs-lisp
  (use-package dmenu-handler
    :load-path "lisp/dmenu"
    :after (init)
    :bind
    (("C-z d" . 'dmenu-handler)
     ("C-z C-d" . 'dmenu-handler)
     (:map eww-mode-map
           ("f" . 'dmenu-handler-stream)
           ("D" . 'dmenu-handler-download-video)
           ("A" . 'dmenu-handler-audio))))
#+end_src

*** edwina

My (very minimal) fork of edwina, with an extra function to emulate
dwm keybindings with the super key. Located [[http://github.com/jamzattack/edwina][here]].

Note: my pull request has been merged, but the MELPA package has not
been updated yet, so clone [[https://github.com/ajgrf/edwina][this]] to get the new function.

#+begin_src emacs-lisp
  (use-package edwina
    :load-path "lisp/edwina"
    :config
    (edwina-setup-dwm-keys 'super)
    (edwina-mode 0))
#+end_src

*** library-genesis

My custom package for searching library genesis. I bind ~C-z l~ to a
search.

#+begin_src emacs-lisp
  (use-package library-genesis
    :bind (("C-z l" . library-genesis-search)))
#+end_src

*** search-query

My own search-query package. It simply provides a few functions so
that I don't need to use DuckDuckGo's bangs, and for websites that
don't have a bang.

#+begin_src emacs-lisp
  (use-package search-query
    :bind (("C-z t" . torrentz2-search)
           ("C-z C-t" . torrentz2-search)
           ("C-z y" . youtube-search)	 
           ("C-z C-y" . youtube-search)
           ("C-z w" . wikipedia-search)
           ("C-z C-w" . wikipedia-search)))
#+end_src

*** lilypond-mode

I copied lilypond-mode into my custom directory for the machines that
don't have lilypond installed.

#+begin_src emacs-lisp
  (defun custom-lilypond-setup ()
    "Sets the buffer's comile command and comment-column."
    (setq-local compile-command
                (format "lilypond %s" buffer-file-name))
    (setq-local comment-column 0))

  (use-package lilypond-mode
    :load-path "lisp/lilypond-mode"
    :defer 20
    :mode ("\\.ly\\'" . LilyPond-mode)
    :hook (LilyPond-mode . custom-lilypond-setup))
#+end_src

** ELPA Packages

*** god-mode

God-mode is kinda like modal editing using the default keybindings.
It essentially acts as an emacs-only sticky-key.

I bind it to escape (note the use of "<escape>" rather than "ESC"). I
recommend using the same key for escape and control.

I also set it up so that my mode-line is purple when it is active, and
green otherwise.

#+begin_src emacs-lisp
  (use-package god-mode
    :ensure t
    :custom
    ((god-exempt-major-modes nil)
     (god-exempt-predicates nil))
    :bind
    (("<escape>" . 'god-mode-all)
     :map god-local-mode-map
     ("." . 'repeat))
    :init
    (require 'my-mode-line)
    (add-hook 'god-mode-enabled-hook 'mode-line-purple)
    (add-hook 'god-mode-disabled-hook 'mode-line-green))
#+end_src

*** HELM

Rebind a few keys in order to make use of helm's features. Stuff like
find-files and switch-to-buffer. Also remap =C-x k= to
kill-this-buffer, because I use helm-mini to kill other buffers.

I also bind M-C-y to helm-show-kill-ring. I tried to use this to
replace yank-pop but the latter is too engrained in my fingers.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :custom ((helm-completion-style 'emacs)
             (helm-describe-variable-function 'helpful-variable)
             (helm-describe-function-function 'helpful-callable))
    :config
    (require 'helm-config)
    (add-to-list 'desktop-globals-to-save 'helm-ff-history)
    (add-to-list 'desktop-globals-to-save 'extended-command-history)
    (helm-mode t)
    :bind (("M-x" . 'helm-M-x)
           ("<menu><menu>" . 'helm-M-x)
           ("M-s M-o" . 'helm-occur)
           ("C-x b" . 'helm-mini)
           ("C-x k" . 'kill-this-buffer)
           ("C-x C-f" . 'helm-find-files)
           ("C-x r b" . 'helm-filtered-bookmarks)
           ("M-C-y" . 'helm-show-kill-ring)
           :map helm-map
           ("C-h c" . 'describe-key-briefly)))
#+end_src

**** Helm system packages

Provides an abstraction layer for viewing and installing system
packages.

#+begin_src emacs-lisp
  (use-package helm-system-packages
    :ensure t
    :after helm)
#+end_src

**** Helm notmuch

A helm interface for notmuch. Load it after both helm and notmuch (of
course).

#+begin_src emacs-lisp
  (use-package helm-notmuch
    :ensure t
    :after (helm notmuch)
    :bind (:map ctl-x-map
                ("m" . helm-notmuch)))
#+end_src

**** Helm man

Remap =C-h C-m= to helm-man-woman, a helm interface for selecting
manpages.

#+begin_src emacs-lisp
  (use-package helm-man
    :after (helm)
    :custom (man-width 80)
    :bind ("C-h C-m" . 'helm-man-woman))
#+end_src

*** COMMENT Pinentry

This package lets emacs be used for gpg authentication

#+begin_src emacs-lisp
  (use-package pinentry
    :custom (epg-pinentry-mode 'loopback)
    :config
    (pinentry-start))
#+end_src

*** Helpful

Helpful gives a whole lot more information than describe-*. I also
bind =C-h SPC= to helpful-at-point, just to save a keypress here and
there.

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind (([remap describe-function] . helpful-callable)
           ([remap describe-variable] . helpful-variable)
           ([remap describe-key] . helpful-key)
           ("C-h SPC" . helpful-at-point)))
#+end_src

*** Major Modes

**** Nov.el - epub in emacs

Read epub files in emacs. I set this up as the default mode for epubs,
and set the default width to 80C.

#+begin_src emacs-lisp
  (use-package nov
    :ensure t
    :custom (nov-text-width 80)
    :mode ("\\.epub\\'" . nov-mode))
#+end_src

**** PDF-tools

Majorly increases performance when viewing pdfs as a file

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install))
#+end_src

*** Programming

**** Geiser

Interact with scheme in a powerful and emacsy way. I set guile as the
default scheme program.

#+begin_src emacs-lisp
  (use-package geiser
    :ensure t
    :custom ((scheme-program-name "guile")))
#+end_src

**** SLIME

Interact with common lisp in a powerful and emacsy way. I set sbcl as
the default lisp program.

#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :custom ((inferior-lisp-program "sbcl")
             (slime-contribs '(slime-fancy))))
#+end_src

**** paredit

#+begin_src emacs-lisp 
  (use-package paredit
    :ensure t
    :hook ((emacs-lisp-mode . paredit-mode)
           (lisp-interaction-mode . paredit-mode)
           (ielm-mode . paredit-mode)
           (eval-expression-minibuffer-setup . paredit-mode)
           (lisp-mode . paredit-mode)
           (scheme-mode . paredit-mode)))
#+end_src

*** Org

**** Github markdown

Export to markdown.

#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure t)
#+end_src

**** Html export

Export to html.

#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

*** EXWM - Emacs X Window Manager

Manipulate X windows as emacs buffers.

#+begin_src emacs-lisp
  (use-package exwm
    :ensure t
    :init
    (add-hook 'exwm-init-hook 'set-up-fonts-please)
    :config
    (require 'custom-exwm-config)
    (custom-exwm-config)
    (exwm-init))
#+end_src

**** Desktop-environment (useful with EXWM)

This package sets up volume keys, brightness keys, and a screen
locker. I like i3lock, and want it to use my theme's background
colour.

#+begin_src emacs-lisp
  (defun custom-screenlock-command ()
    (let ((color (face-attribute 'default :background)))
      (setq desktop-environment-screenlock-command
            (format "i3lock -c '%s' -n"
                    (with-temp-buffer
                      (insert (if
                                  (= (length color) 7)
                                  color
                                "#000000"))
                      (beginning-of-line)
                      (delete-char 1)
                      (buffer-string))))))

  (use-package desktop-environment
    :ensure t
    :config
    (defadvice desktop-environment-lock-screen
        (before change-bg-color activate)
      (custom-screenlock-command))
    (desktop-environment-mode))
#+end_src

*** "Applications"

**** vterm

A performant terminal emulator in emacs. unfortunately, it still
doesn't play nice with complicated things such as nethack.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

**** MPDel

A more flexible mpd client than mingus.

#+begin_src emacs-lisp
  (use-package mpdel
    :ensure t
    :after (init)
    :bind-keymap (("s-m" . mpdel-core-map))
    :bind (("s-a" . mpdel-core-open-albums)))
#+end_src

**** Mingus

A nice mpd front-end in emacs (I couldn't get EMMS working with
mopidy)

#+begin_src emacs-lisp
  (use-package mingus
    :ensure t
    :defer 20
    :bind (:map mingus-playlist-map
                ("C-x r b" . 'helm-filtered-bookmarks)
                ("C-x r m" . 'bookmark-set)
                ("r" . nil)
                ("r m" . 'mingus-bookmark-set)
                ("r b" . 'mingus-bookmark-jump)
                ("r d" . 'mingus-bookmark-delete)))
#+end_src

**** Notmuch

A simple email client, with emphasis on searching

#+begin_src emacs-lisp
  (use-package notmuch
    :after (init)
    :ensure t
    :config
    (setq notmuch-archive-tags '("-unread" "-inbox")
          notmuch-search-oldest-first nil)
    :bind
    (:map notmuch-show-mode-map
          ("u" . 'eww-follow-link)))
#+end_src

**** Transmission

An emacs front-end for the transmission bittorrent daemon

#+begin_src emacs-lisp
  (use-package transmission
    :ensure t
    :after (eww)
    :config
    (defun transmission-add-url-at-point (url)
      "Adds torrent if point is on a magnet link"
      (interactive (list (shr-url-at-point nil)))
      (transmission-add url))
    :bind (:map eww-mode-map
                ("m" . transmission-add-url-at-point)))
#+end_src

*** Appearance

**** Rainbow-mode

This package highlights hex colours
(also install xterm-color to use in a terminal emulator)

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :bind (("C-c h" . 'rainbow-mode)))
#+end_src

**** Rainbow-delimiters

Minor mode that highlights parentheses well

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

**** Dim (unclutter mode-line)

From Alezost, remove clutter in the mode-line.

#+begin_src emacs-lisp
  (use-package dim
    :ensure t
    :config
    (dim-major-names
     '((lisp-interaction-mode "eλ")
       (emacs-lisp-mode    "el")
       (lisp-mode          "cl")
       (scheme-mode        "scm")
       (org-mode           "org")
       (Info-mode          "info")
       (ibuffer-mode       "ibu")
       (LilyPond-mode      "ly")
       (lilypond-mode      "ly")
       (help-mode          "?")))
    (dim-minor-names
     '((auto-fill-function " ")
       (isearch-mode       " ")
       (helm-mode          "" helm)
       (paredit-mode       "" paredit)
       (god-local-mode     " ∞")
       (org-src-mode       " *" org)
       (desktop-environment-mode "" desktop-environment)
       (eldoc-mode         ""    eldoc))))
#+end_src

**** Dimmer (dim inactive buffers)

Dims inactive buffers, so that you can more clearly see which window
you're in (sometimes the mode-line just doesn't cut it).

#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :custom (dimmer-fraction 0.3)
    :config (dimmer-mode t))
#+end_src

*** Quality of life

**** COMMENT Smex

smex integrates "M-x" with =ido=.

Note: I have abandoned ido in favour of helm, but left this as a
comment in case I want to switch back..

#+begin_src emacs-lisp
  (use-package smex
    :init (smex-initialize)
    :bind ("M-x" . smex ))
#+end_src

**** Try

Allows you to try other packages without committing

#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src

**** scratch

scratch allows you to create a scratch buffer - either in the major
mode of the current buffer, or (with prefix arg) in the major mode of
your choice.

#+begin_src emacs-lisp
  (use-package scratch
    :ensure t
    :bind (("C-z s" . scratch)
           ("C-z C-s" . scratch)))
#+end_src

*** Not really useful

**** Lorem Ipsum

A 'Lorem ipsum' generator

#+begin_src emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+end_src

* Fixing defaults

** Miscellaneous

*** Swap yes/no prompt with y/n

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Enable all the features

#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

** Aesthetics

*** GUI ugliness

Disable all the wasteful bars

#+begin_src emacs-lisp
  (fringe-mode)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

*** Disable audible and visual bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Tabs

Tabs are 4 spaces wide

#+begin_src emacs-lisp
  (setq tab-width 4)
#+end_src

** desktop-save

#+begin_src emacs-lisp
  (desktop-save-mode t)
#+end_src

** dired

#+begin_src emacs-lisp
  (setq dired-listing-switches "-lah --group-directories-first")
#+end_src

** show-paren

#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src

* Custom functions

** Reloading config

Reloads this config file. Bound to "C-c r" in Keybindings section.

#+begin_src emacs-lisp
  (defun config-reload ()
    "Reloads (but does not tangle) config file"
    (interactive)
    (load-file (concat user-emacs-directory "config.el")))
#+end_src

** Typesetting

*** Opening Output

#+begin_src emacs-lisp
  (defun opout ()
    "Opens a pdf file of the same name as the current file"
    (interactive)
    (find-file-other-window (concat
                             (file-name-sans-extension buffer-file-name)
                             ".pdf")))
#+end_src

** Email

#+begin_src emacs-lisp
  (defun mailsync ()
    "Downloads new mail and adds it to the notmuch database"
    (interactive)
    (shell-command "mbsync -a && notmuch new &" "*mailsync*"))
#+end_src

** Finding files

*** List Documents

This used to just call an external shell script, but I replaced it
with a more emacsy version.

#+begin_src emacs-lisp
  (defun list-documents (&optional dir)
    "Using `find-dired', list all the postscript and pdf files a
  specified directory.  If called interactively, prompt for
  Directory. Else, DIR will default to ~/Documents/."
    (interactive (list (read-directory-name "Find videos where: " "~/Documents/")))
    (unless dir
      (setq dir "~/Documents/"))
    (find-dired dir
                "\\( -iname \\*.ps -o -iname \\*.pdf \\)")
    (dired-hide-details-mode t)
    (setq truncate-lines t))
#+end_src

*** List Videos

This used to just call an external shell script, but I replaced it
with a more emacsy version. In order to open videos externally,
=openwith= must be installed as above.

#+begin_src emacs-lisp
  (defun list-videos (&optional dir)
    "Using `find-dired', list all the videos a specified directory.
  If called interactively, prompt for Directory. Else, DIR will
  default to ~/Downloads/."
    (interactive (list (read-directory-name "Find videos where: " "~/Downloads/")))
    (unless dir
      (setq dir "~/Downloads/"))
    (find-dired dir
                "\\( -iname \\*.mkv -o -iname \\*.avi -o -iname \\*.mp4 -o -iname \\*.webm -o -iname \\*.m4v \\)")
    (dired-hide-details-mode t)
    (setq truncate-lines t))
#+end_src

* Major mode hooks and variables

** M-x compile hooks

*** Groff

#+begin_src emacs-lisp
  (add-hook 'nroff-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "groff -ms -Tpdf %s > %s"
                           (shell-quote-argument buffer-file-name)
                           (concat (file-name-sans-extension
                                    (shell-quote-argument
                                     buffer-file-name)) ".pdf")))))
#+end_src

*** LaTeX

#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "pdflatex %s" buffer-file-name))))
#+end_src

* Keybindings

** Interaction with Emacs

*** Terminal functionality

Rebinding some useful keys that can't be used in a terminal.

#+begin_src emacs-lisp
  (unless (window-system)
    ;; Comments -- C-x C-;
    (bind-key "C-c ;" 'comment-line)
    ;; Indentation -- C-M-\"
    (bind-key "C-c \\" 'indent-region))
#+end_src

*** bury-buffer and kill-buffer-and-window

#+begin_src emacs-lisp
  (bind-key "C-z C-z" 'bury-buffer)
  (bind-key "C-z z" 'kill-buffer-and-window)
#+end_src

** Config

#+begin_src emacs-lisp
  (bind-key "C-c r" 'config-reload)
#+end_src

** General WM stuff

*** System information

Built-in battery function with =C-z b=.
Custom notification script with =C-z C-b=.

#+begin_src emacs-lisp
  (bind-key "C-z b" 'battery)
  (bind-key "C-z C-b" 'notibar)
#+end_src

*** dmenu-ish scripts

A couple of things I used to do with dmenu, now made emacsy.

#+begin_src emacs-lisp
  (bind-keys
   ("C-z p" . list-documents)
   ("C-z v" . list-videos))
#+end_src

** Typesetting

"opout" is a script to open the output of a file (e.g. TeX,
LilyPond).

#+begin_src emacs-lisp
  (bind-key "C-c p"  'opout)
#+end_src

** Miscellaneous

*** Line numbers

#+begin_src emacs-lisp
  (bind-key "C-c n" 'display-line-numbers-mode)
#+end_src

*** Spelling correction

#+begin_src emacs-lisp
  (bind-key "C-c s" 'flyspell-mode)
#+end_src

*** Line wrap

#+begin_src emacs-lisp
  (bind-key "C-c l" 'toggle-truncate-lines)
#+end_src

* Mode-line

Just some basic extra stuff in the mode-line.
I don't want anything fancy.

#+begin_src emacs-lisp
  (column-number-mode t)
  (display-time-mode t)
  (setq display-time-24hr-format 1)
#+end_src

* Email

email settings

#+begin_src emacs-lisp
  (setq send-mail-function 'sendmail-send-it
        sendmail-program "/usr/bin/msmtp"
        mail-specify-envelope-from t
        message-sendmail-envelope-from 'header
        mail-envelope-from 'header)
#+end_src

